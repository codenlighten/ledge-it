{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\blockchain-dev\\\\ledgeit\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\blockchain-dev\\\\ledgeit\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Computer from 'bitcoin-computer';\nimport './App.css';\nimport Card from './card';\nimport Ledgeit from './artwork';\n\nfunction App() {\n  const _useState = useState(new Computer({\n    seed: 'start voice neutral science goddess object when satoshi bamboo page elbow crucial',\n    chain: 'BSV',\n    network: 'livenet',\n    // testnet or livenet\n    path: \"m/44'/0'/0'/0\"\n  })),\n        _useState2 = _slicedToArray(_useState, 2),\n        computer = _useState2[0],\n        setComputer = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        balance = _useState4[0],\n        setBalance = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        date = _useState6[0],\n        setDate = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        name = _useState8[0],\n        setName = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        statement = _useState10[0],\n        setStatement = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        revs = _useState12[0],\n        setRevs = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        ledgeits = _useState14[0],\n        setLedgeits = _useState14[1];\n\n  const _useState15 = useState(0),\n        _useState16 = _slicedToArray(_useState15, 2),\n        refresh = _useState16[0],\n        setRefresh = _useState16[1];\n\n  useEffect(() => {\n    const fetchRevs = async () => {\n      setBalance((await computer.db.wallet.getBalance()));\n      setRevs((await computer.getOwnedRevs(computer.db.wallet.getPublicKey())));\n      setTimeout(() => setRefresh(refresh + 1), 3500);\n    };\n\n    fetchRevs();\n  }, [computer.db.wallet, refresh]);\n  useEffect(() => {\n    const fetchLedgeits = async () => {\n      setLedgeits((await Promise.all(revs.map(async rev => computer.sync(rev)))));\n    };\n\n    fetchLedgeits();\n  }, [revs, computer]);\n  useEffect(() => console.log('revs', revs), [revs]);\n  useEffect(() => console.log('ledgeits', ledgeits), [ledgeits]);\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n    const ledgeit = await computer.new(Ledgeit, [date, name, statement]);\n    console.log('created ledgeit', ledgeit);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"navbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"LedgeIt!\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"It's Your Statement...Make it Count!\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"newLedgeit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Date\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"date\",\n    placeholder: \"Today's Date\",\n    value: date,\n    onChange: e => setDate(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), \"Name\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"string\",\n    placeholder: \"Your Name or Pseudonym\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), \"Statement\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    type: \"string\",\n    placeholder: \"what's on your mind?\",\n    value: statement,\n    onChange: e => setStatement(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"createbutton\",\n    type: \"submit\",\n    value: \"Send Bitcoin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Create Ledgeit\"))), React.createElement(\"div\", {\n    className: \"legitimized\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"You are Ledgeit!\"), React.createElement(\"ul\", {\n    className: \"flex-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, ledgeits.map(ledgeit => React.createElement(Card, {\n    ledgeit: ledgeit,\n    key: ledgeit.date + ledgeit.name + ledgeit.statement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), \" */}\", React.createElement(\"div\", {\n    className: \"newWallet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Your Wallet\"), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Address\"), \"\\xA0\", computer.db.wallet.getAddress().toString(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Public Key\"), \"\\xA0\", computer.db.wallet.getPublicKey().toString(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Balance\"), \"\\xA0\", balance / 1e8, \" \", computer.db.wallet.restClient.chain, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: () => setComputer(new Computer()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Generate New Wallet\")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/admin/Documents/blockchain-dev/ledgeit/src/App.js"],"names":["React","useState","useEffect","Computer","Card","Ledgeit","App","seed","chain","network","path","computer","setComputer","balance","setBalance","date","setDate","name","setName","statement","setStatement","revs","setRevs","ledgeits","setLedgeits","refresh","setRefresh","fetchRevs","db","wallet","getBalance","getOwnedRevs","getPublicKey","setTimeout","fetchLedgeits","Promise","all","map","rev","sync","console","log","handleSubmit","evt","preventDefault","ledgeit","new","e","target","value","getAddress","toString","restClient"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Computer from 'bitcoin-computer'\nimport './App.css'\nimport Card from './card'\nimport Ledgeit from './artwork'\n\nfunction App() {\n  const [computer, setComputer] = useState(new Computer({ \n  seed: 'start voice neutral science goddess object when satoshi bamboo page elbow crucial', chain: 'BSV',\n  network: 'livenet', // testnet or livenet\n  path: \"m/44'/0'/0'/0\"}))\n \n\n\n  const [balance, setBalance] = useState(0)\n\n  const [date, setDate] = useState('')\n  const [name, setName] = useState('')\n  const [statement, setStatement] = useState('')\n\n  const [revs, setRevs] = useState([])\n  const [ledgeits, setLedgeits] = useState([])\n  const [refresh, setRefresh] = useState(0)\n  \n  \n  useEffect(() => {\n    const fetchRevs = async () => {\n      setBalance(await computer.db.wallet.getBalance())\n      setRevs(await computer.getOwnedRevs(computer.db.wallet.getPublicKey()))\n      setTimeout(() => setRefresh(refresh + 1), 3500)\n    }\n    fetchRevs()\n  }, [computer.db.wallet, refresh])\n\n  useEffect(() => {\n  const fetchLedgeits = async () => {\n    setLedgeits(await Promise.all(revs.map(async rev => computer.sync(rev))))\n  }\n    fetchLedgeits()\n  }, [revs, computer])\n\n  useEffect(() => console.log('revs', revs), [revs])\n  useEffect(() => console.log('ledgeits', ledgeits), [ledgeits])\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault()\n    const ledgeit = await computer.new(Ledgeit, [date, name, statement])\n    console.log('created ledgeit', ledgeit)\n  }\n\n  return (\n    <div className=\"App\">\n    <div className=\"navbar\">\n    <h1>LedgeIt!</h1>\n    <h2>It's Your Statement...Make it Count!</h2>\n    </div>\n     <br/>\n      {/* <h2>Create new Ledgeit</h2> */}\n      <div className=\"newLedgeit\">\n      <form onSubmit={handleSubmit}>\n        Date<br />\n        <input type=\"date\" placeholder=\"Today's Date\" value={date} onChange={e => setDate(e.target.value)} />\n\n        Name<br />\n        <input type=\"string\" placeholder=\"Your Name or Pseudonym\" value={name} onChange={e => setName(e.target.value)} />\n\n        Statement<br />\n        <textarea type=\"string\" placeholder=\"what's on your mind?\" value={statement} onChange={e => setStatement(e.target.value)} />\n        <br/>\n\n        <button className=\"createbutton\" type=\"submit\" value=\"Send Bitcoin\">Create Ledgeit</button>\n      </form>\n      </div>\n<div className=\"legitimized\">\n      <h2>You are Ledgeit!</h2>\n      <ul className=\"flex-container\">\n      {ledgeits.map(ledgeit => <Card ledgeit={ledgeit} key={ledgeit.date + ledgeit.name + ledgeit.statement} />)}\n      </ul>\n      </div>\n      <br/>\n      {/* <div className=\"qrc\">\n        <h3>Load up your account by scanning here.</h3>\n        {/* need to create code that autogenerates new qrc with new wallet creations */}\n        {/* <img src=\"ledgeit-public.png\" alt=\"qrc-ledgeit\"></img>\n      </div> */} */}\n      <div className = \"newWallet\">\n      <h3>Your Wallet</h3>\n      <b>Address</b>&nbsp;{computer.db.wallet.getAddress().toString()}<br />\n      <b>Public Key</b>&nbsp;{computer.db.wallet.getPublicKey().toString()}<br />\n      <b>Balance</b>&nbsp;{balance/1e8} {computer.db.wallet.restClient.chain}<br />\n      <button type=\"submit\" onClick={() => setComputer(new Computer())}>Generate New Wallet</button>\n      </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}